name: Build Windows

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - rename-screenconnect
      - screenconnect

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      # Weâ€™ll use static libs for easier linking on the runner
      VCPKG_DEFAULT_TRIPLET: x64-windows-static

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      # Tooling we need for vcpkg + bindgen (libclang) + CMake/Ninja
      - name: Install build dependencies
        run: |
          choco install -y git cmake ninja llvm

      # Bootstrap vcpkg in the runner's temp and expose it via env
      - name: Setup vcpkg (manual)
        shell: cmd
        run: |
          git clone https://github.com/microsoft/vcpkg "%RUNNER_TEMP%\vcpkg"
          "%RUNNER_TEMP%\vcpkg\bootstrap-vcpkg.bat"
          echo VCPKG_ROOT=%RUNNER_TEMP%\vcpkg>> "%GITHUB_ENV%"

      # Install the native ports that your Rust build scripts bindgen against
      - name: Install libraries via vcpkg
        shell: powershell
        run: |
          & "$env:VCPKG_ROOT\vcpkg.exe" install `
            opus:$env:VCPKG_DEFAULT_TRIPLET `
            libvpx:$env:VCPKG_DEFAULT_TRIPLET `
            libyuv:$env:VCPKG_DEFAULT_TRIPLET `
            aom:$env:VCPKG_DEFAULT_TRIPLET

      # Make libclang and vcpkg headers visible to bindgen on the runner
      - name: Configure environment for bindgen/clang
        shell: powershell
        run: |
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
          echo ("BINDGEN_EXTRA_CLANG_ARGS=-I{0}" -f `
            (Join-Path $env:VCPKG_ROOT "installed\$env:VCPKG_DEFAULT_TRIPLET\include")) >> $env:GITHUB_ENV

      # Optional: rename app/window strings BEFORE building (safe no-op if files differ)
      # Comment this out if you don't want auto-rename.
      - name: Rename app branding to 'Screen Connect'
        shell: powershell
        run: |
          $pairs = @(
            @{Path="flutter/windows/runner/Runner.rc"; Patterns=@("RustDesk","rustdesk"); Replace="Screen Connect"},
            @{Path="flutter/windows/runner/main.cpp"; Patterns=@('L"RustDesk"'); Replace='L"Screen Connect"'},
            @{Path="flutter/windows/runner/flutter_window.cpp"; Patterns=@('L"RustDesk"'); Replace='L"Screen Connect"'}
          )
          foreach ($p in $pairs) {
            if (Test-Path $p.Path) {
              $c = Get-Content $p.Path -Raw
              foreach ($pat in $p.Patterns) { $c = $c -replace [regex]::Escape($pat), $p.Replace }
              Set-Content $p.Path $c -NoNewline
            }
          }

      # Flutter toolchain
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # lock if you prefer, e.g. flutter-version: "3.19.6"

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Get Flutter packages
        working-directory: flutter
        run: flutter pub get

      # Build the Windows Runner
      - name: Build Flutter Windows Release
        working-directory: flutter
        run: flutter build windows --release

      # Upload the produced EXE + DLLs
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ScreenConnect-Windows
          path: flutter/build/windows/x64/runner/Release/
